version: '3.8'

services:
  # 数据库服务
  postgres:
    image: postgres:15-alpine
    container_name: octopus-postgres
    environment:
      POSTGRES_DB: octopus_messenger
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Abc123123!
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d octopus_messenger"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    networks:
      - octopus-network

  # Redis服务
  redis:
    image: redis:7-alpine
    container_name: octopus-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass "redis123"
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis123", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - octopus-network

  # MongoDB服务
  mongodb:
    image: mongo:6.0
    container_name: octopus-mongodb
    environment:
      MONGO_INITDB_DATABASE: octopus_messenger
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo123
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    networks:
      - octopus-network

  # 网关服务
  gateway:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.gateway
    container_name: octopus-gateway
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=octopus_messenger
      - DB_USER=postgres
      - DB_PASSWORD=Abc123123!
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis123
      - MONGODB_URL=mongodb://mongo:mongo123@mongodb:27017/octopus_messenger
      - JWT_SECRET=your-super-secret-jwt-key-please-change-in-production
      - SERVICE_TOKEN=service-communication-token
      - CORS_ORIGINS=http://localhost:3000,http://localhost:3005
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    networks:
      - octopus-network

  # 消息处理服务
  message-processor:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.message-processor
    container_name: octopus-message-processor
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=octopus_messenger
      - DB_USER=postgres
      - DB_PASSWORD=Abc123123!
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis123
      - MONGODB_URL=mongodb://mongo:mongo123@mongodb:27017/octopus_messenger
      - MESSAGE_PROCESSOR_PORT=3001
      - SERVICE_TOKEN=service-communication-token
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    networks:
      - octopus-network

  # AI服务
  ai-service:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.ai-service
    container_name: octopus-ai-service
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=octopus_messenger
      - DB_USER=postgres
      - DB_PASSWORD=Abc123123!
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis123
      - AI_SERVICE_PORT=3002
      - SERVICE_TOKEN=service-communication-token
      - OPENAI_API_KEY=${OPENAI_API_KEY:-sk-fake-key-for-testing}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY:-fake-key-for-testing}
      - OPENAI_MODEL=gpt-4
      - CLAUDE_MODEL=claude-3-sonnet-20240229
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    networks:
      - octopus-network

  # 任务服务
  task-service:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.task-service
    container_name: octopus-task-service
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=octopus_messenger
      - DB_USER=postgres
      - DB_PASSWORD=Abc123123!
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis123
      - TASK_SERVICE_PORT=3003
      - SERVICE_TOKEN=service-communication-token
      - LARK_ENABLED=false
      - SALESFORCE_ENABLED=false
      - NOTION_ENABLED=false
      - JIRA_ENABLED=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    networks:
      - octopus-network

  # Bot管理服务
  bot-manager:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.bot-manager
    container_name: octopus-bot-manager
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=octopus_messenger
      - DB_USER=postgres
      - DB_PASSWORD=Abc123123!
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis123
      - BOT_MANAGER_PORT=3004
      - SERVICE_TOKEN=service-communication-token
      - TELEGRAM_ENABLED=false
      - DISCORD_ENABLED=false
      - SLACK_ENABLED=false
      - WHATSAPP_ENABLED=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    networks:
      - octopus-network

  # 管理面板
  admin-panel:
    build:
      context: .
      dockerfile: ./docker/Dockerfile.admin-panel
    container_name: octopus-admin-panel
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - PORT=3005
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=octopus_messenger
      - DB_USER=postgres
      - DB_PASSWORD=Abc123123!
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis123
      - ADMIN_PANEL_PORT=3005
      - SERVICE_TOKEN=service-communication-token
      - JWT_SECRET=your-super-secret-jwt-key-please-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3005/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: unless-stopped
    networks:
      - octopus-network

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: octopus-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - gateway
      - admin-panel
    restart: unless-stopped
    networks:
      - octopus-network

  # 数据库管理工具
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: octopus-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@octopus.com
      PGADMIN_DEFAULT_PASSWORD: admin123
    ports:
      - "5050:80"
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - octopus-network

  # Redis管理工具
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: octopus-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
      REDIS_PASSWORD: redis123
    ports:
      - "8081:8081"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - octopus-network

  # MongoDB管理工具
  mongo-express:
    image: mongo-express:latest
    container_name: octopus-mongo-express
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: mongo
      ME_CONFIG_MONGODB_ADMINPASSWORD: mongo123
      ME_CONFIG_MONGODB_URL: mongodb://mongo:mongo123@mongodb:27017/
      ME_CONFIG_BASICAUTH_USERNAME: admin
      ME_CONFIG_BASICAUTH_PASSWORD: admin123
    ports:
      - "8082:8081"
    depends_on:
      - mongodb
    restart: unless-stopped
    networks:
      - octopus-network

  # 监控服务
  prometheus:
    image: prom/prometheus:latest
    container_name: octopus-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - octopus-network

  # 数据可视化
  grafana:
    image: grafana/grafana:latest
    container_name: octopus-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - octopus-network

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  prometheus_data:
  grafana_data:

networks:
  octopus-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16 