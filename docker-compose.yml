version: '3.8'

services:
  # 网关服务
  gateway:
    build:
      context: ./services/gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - MONGODB_URL=mongodb://mongodb:27017/octopus_messenger
    depends_on:
      - postgres
      - redis
      - mongodb
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - octopus-network

  # 消息处理服务
  message-processor:
    build:
      context: ./services/message-processor
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - MONGODB_URL=mongodb://mongodb:27017/octopus_messenger
    depends_on:
      - postgres
      - redis
      - mongodb
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - octopus-network

  # AI服务
  ai-service:
    build:
      context: ./services/ai-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=production
      - PORT=3002
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - MONGODB_URL=mongodb://mongodb:27017/octopus_messenger
    depends_on:
      - postgres
      - redis
      - mongodb
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - octopus-network

  # 任务服务
  task-service:
    build:
      context: ./services/task-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=production
      - PORT=3003
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - MONGODB_URL=mongodb://mongodb:27017/octopus_messenger
    depends_on:
      - postgres
      - redis
      - mongodb
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - octopus-network

  # Bot管理服务
  bot-manager:
    build:
      context: ./services/bot-manager
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - MONGODB_URL=mongodb://mongodb:27017/octopus_messenger
    depends_on:
      - postgres
      - redis
      - mongodb
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - octopus-network

  # 管理面板
  admin-panel:
    build:
      context: ./services/admin-panel
      dockerfile: Dockerfile
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=production
      - PORT=3005
      - DB_HOST=postgres
      - REDIS_HOST=redis
      - MONGODB_URL=mongodb://mongodb:27017/octopus_messenger
    depends_on:
      - postgres
      - redis
      - mongodb
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - octopus-network

  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: octopus_messenger
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - octopus-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - octopus-network

  # MongoDB
  mongodb:
    image: mongo:7
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: password
      MONGO_INITDB_DATABASE: octopus_messenger
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    restart: unless-stopped
    networks:
      - octopus-network

  # Nginx负载均衡
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - gateway
    restart: unless-stopped
    networks:
      - octopus-network

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    restart: unless-stopped
    networks:
      - octopus-network

  # Grafana监控面板
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - octopus-network

networks:
  octopus-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  mongodb_data:
  prometheus_data:
  grafana_data: 